"""
    Items are a subclass of objects expected to be picked up.
    Equipment are a subclass of items designed to fit in slots.
    
    Ultiumately I want loot to be generated by tables that specify
    item families and quality levels, eg,
    
    * When foraging in a certain spot, generate one of the following:
        * Flower A at quality between 1-3
        * Plant B at quality 2-4
        * Mushroom C at quality 1-4 where quality 4 is a different subtype
        * Low chance of variants, only when quality is max
"""
from .objects import Object
from util.AttrProperty import AttributeProperty

class Item(Object):
    # Old properties
    portable    = True                                  # ObjectParent/portable
    # New properties
    size        = AttributeProperty("size",1)           # Determines what containers this can be stored in
    wear_slot   = AttributeProperty("wear_slot",None)   # None, string, or list of strings matching equipcore slots
    slot        = AttributeProperty("slot",None)        # In case this item is currently held/worn, store where
    belt_attach = AttributeProperty("belt_attach",False)# Meant to be hunt on a belt
    fast_remove = AttributeProperty("fast_remove",False)# Equipment: Can be pulled off without effort
    
    def at_equip(self,character, slot): # includes 
        self.slot = slot
    def at_reequip(self,character,newSlot): # From one equip slot to another
        self.slot = newSlot
    def at_unequip(self,character):
        self.slot = None
    @property
    def fast_contents(self):
        """
        Fast-action contents of this object: Lists highly accessible objects
        which can be used instantly, eg, without digging through your backpack.
        This is intended for storage objects but must be defined on all objects.
        This is specifically for belts, and pockets that only contain one item apiece.
        
        Does not return self.
        """
        return []
    @property
    def sub_containers(self):
        """
        Some containers are specifically meant to hold other containers,
        and these containers should be accessible.  This is for things like
        belts that have attachments.
        
        Does not return self.
        """
        return []
 
    
class Equipment(Item):

    pass
    
class Pants(Equipment):
    wear_slot="legs"
class Shirt(Equipment):
    wear_slot="shirt"